<section class="d-flex flex-column align-items-center justify-content-center min-vh-100 py-5">
  <div class="text-center mb-5">
    <h1 class="display-4 fw-bold text-primary mb-3">Welcome to Airbrush Admin Dashboard</h1>
    <p class="lead text-muted">Your central hub for managing Airbrush Content</p>
  </div>

  <div class="container">
    <!-- Categories Grid -->
    <div class="row g-4" id="categories-grid">
      <!-- Categories will be dynamically loaded here -->
    </div>

    <!-- Loading State -->
    <div id="loading-state" class="text-center py-5">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-3 text-muted">Loading categories...</p>
    </div>

    <!-- Empty State -->
    <div id="empty-state" class="text-center py-5" style="display: none;">
      <div class="mb-4">
        <i class="bi bi-folder-x display-1 text-muted"></i>
      </div>
      <h3 class="text-muted mb-3">No Categories Found</h3>
      <p class="text-muted mb-4">Get started by creating your first category to organize your AI-generated content.</p>
      <a href="/new-category" class="btn btn-primary">
        <i class="bi bi-plus-circle me-2"></i>
        Create New Category
      </a>
    </div>
  </div>
</section>

<style>
  .category-card {
    transition: all 0.3s ease;
    border: none;
    border-radius: 12px;
    overflow: hidden;
    height: 100%;
    padding-top: 1.5rem;
  }
  
  .category-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
  }
  
  .category-image {
    height: 200px;
    position: relative;
    overflow: hidden;
  }
  
  .category-img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 15px;
    transition: transform 0.3s ease;
  }
  
  .category-card:hover .category-img {
    transform: scale(1.05);
  }
  
  .category-fallback {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }
  
  .category-fallback::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.1);
  }
  
  .category-icon {
    font-size: 3rem;
    color: white;
    z-index: 1;
  }
  
  .category-card .card-body {
    padding: 1rem;
    padding-bottom: 0;
  }

  
  .category-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #2c3e50;
  }
  
  .category-sections {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 1rem;
  }
  
  .category-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .btn-sm {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    font-size: 1rem;
  }
  
  .text-primary {
    color: #0d6efd !important;
  }
  
  .btn-outline-primary {
    border-color: #0d6efd;
    color: #0d6efd;
  }
  
     .btn-outline-primary:hover {
     background-color: #0d6efd;
     border-color: #0d6efd;
     color: white;
   }
   
   /* Modal Styles */
   .bg-gradient-primary {
     background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
   }
   
   .modal-dialog {
     max-width: 500px;
   }
   
   .section-item {
     display: flex;
     align-items: center;
     padding: 12px 16px;
     border-radius: 8px;
     border: 1px solid #e9ecef;
     background: #fff;
     transition: all 0.2s ease;
     cursor: pointer;
     text-decoration: none;
     color: inherit;
   }
   
   .section-item:hover {
     transform: translateY(-2px);
     box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
     border-color: #0d6efd;
   }
   
   .section-item.has-content {
     border-left: 3px solid #0d6efd;
   }
   
   .section-item.no-content {
     border-left: 3px solid #dee2e6;
     background: #f8f9fa;
   }
   
   .section-icon {
     width: 40px;
     height: 40px;
     border-radius: 8px;
     display: flex;
     align-items: center;
     justify-content: center;
     margin-right: 12px;
     font-size: 1.2rem;
   }
   
   .section-item.has-content .section-icon {
     background: rgba(13, 110, 253, 0.1);
     color: #0d6efd;
   }
   
   .section-item.no-content .section-icon {
     background: rgba(108, 117, 125, 0.1);
     color: #6c757d;
   }
   
   .section-info {
     flex: 1;
   }
   
   .section-title {
     font-size: 0.9rem;
     font-weight: 600;
     margin: 0;
     color: #2c3e50;
   }
   
   .section-status {
     font-size: 0.75rem;
     color: #6c757d;
   }
   
   .section-item.has-content .section-status {
     color: #0d6efd;
   }
   
   .section-action {
     color: #6c757d;
     font-size: 0.9rem;
   }
   
   .section-item:hover .section-action {
     color: #0d6efd;
   }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const categoriesGrid = document.getElementById('categories-grid');
    const loadingState = document.getElementById('loading-state');
    const emptyState = document.getElementById('empty-state');

    // Fetch categories from the API
    const fetchCategories = async () => {
      try {
        const response = await fetch('/api/content', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch categories');
        }
        
        const data = await response.json();
        console.log('Fetched categories:', data);
        
        // Group content by category
        const categories = {};
        data.forEach(item => {
          if (!item || !item.section || !item.section.category) {
            console.warn('Skipping item with missing properties:', item);
            return;
          }
          
          const categoryName = item.section.category.name;
          const categorySlug = item.section.category.slug;
          const categoryId = item.section.category._id;
          const categoryImage = item.section.category.image;
          
          if (!categories[categoryName]) {
            categories[categoryName] = {
              id: categoryId,
              slug: categorySlug,
              name: categoryName,
              image: categoryImage,
              sections: []
            };
          }
          
          // Add section to category if it doesn't exist
          const sectionExists = categories[categoryName].sections.some(
            section => section.href === `/${item.section.slug}`
          );
          
          if (!sectionExists) {
            categories[categoryName].sections.push({
              name: item.section.name,
              href: `/${item.section.slug}`,
              contentId: item._id
            });
          }
        });
        
        return Object.values(categories);
      } catch (error) {
        console.error('Error fetching categories:', error);
        return [];
      }
    };

    // Get category icon based on name
    const getCategoryIcon = (categoryName) => {
      const name = categoryName.toLowerCase();
      if (name.includes('anime') || name.includes('cartoon')) return 'bi-palette';
      if (name.includes('portrait') || name.includes('face')) return 'bi-person';
      if (name.includes('landscape') || name.includes('nature')) return 'bi-tree';
      if (name.includes('animal') || name.includes('pet')) return 'bi-heart';
      if (name.includes('fantasy') || name.includes('magic')) return 'bi-stars';
      if (name.includes('art') || name.includes('creative')) return 'bi-brush';
      if (name.includes('3d') || name.includes('model')) return 'bi-box';
      if (name.includes('ghibli') || name.includes('studio')) return 'bi-film';
      return 'bi-image'; // default icon
    };

    // Get category gradient colors
    const getCategoryGradient = (categoryName) => {
      const name = categoryName.toLowerCase();
      const gradients = [
        'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
        'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
        'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
        'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',
        'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
        'linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)',
        'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)'
      ];
      
      // Use category name to consistently select gradient
      let hash = 0;
      for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
      }
      return gradients[Math.abs(hash) % gradients.length];
    };

         // Global variable to store categories
     let globalCategories = [];
     
     // Render categories
     const renderCategories = async () => {
       loadingState.style.display = 'block';
       categoriesGrid.innerHTML = '';
       
       const categories = await fetchCategories();
       globalCategories = categories; // Store in global variable
       
       loadingState.style.display = 'none';
       
       if (categories.length === 0) {
         emptyState.style.display = 'block';
         return;
       }
       
       emptyState.style.display = 'none';
      
             categories.forEach(category => {
         const icon = getCategoryIcon(category.name);
         const sectionsCount = category.sections.length;
         
         const categoryCard = document.createElement('div');
         categoryCard.className = 'col-lg-4 col-md-6 col-sm-12';
         categoryCard.innerHTML = `
           <div class="card category-card shadow-sm">
             <div class="category-image">
               ${category.image ? 
                 `<img src="${category.image}" alt="${category.name}" class="category-img">` : 
                 `<div class="category-fallback" style="background: ${getCategoryGradient(category.name)}">
                    <i class="bi ${icon} category-icon"></i>
                  </div>`
               }
             </div>
            <div class="card-body">
              <h5 class="category-title">${category.name}</h5>
              <p class="category-sections">
                <i class="bi bi-layers me-1"></i>
                ${sectionsCount} section${sectionsCount !== 1 ? 's' : ''}
              </p>
                             <div class="category-actions">
                 <a href="/${category.slug}" class="btn btn-outline-primary btn-sm" target="_blank" onclick="localStorage.setItem('activeCategory', '${category.id}')">
                   <i class="bi bi-eye me-1"></i>
                   View
                 </a>
                 <a href="/edit-category?id=${category.id}" class="btn btn-outline-secondary btn-sm" onclick="localStorage.setItem('activeCategory', '${category.id}')">
                   <i class="bi bi-pencil me-1"></i>
                   Edit
                 </a>
                 <button class="btn btn-outline-info btn-sm" onclick="showCategoryDetails('${category.id}')">
                   <i class="bi bi-info-circle me-1"></i>
                   Details
                 </button>
               </div>
            </div>
          </div>
        `;
        
        categoriesGrid.appendChild(categoryCard);
      });
    };

         // Show category details in a modal
     window.showCategoryDetails = function(categoryId) {
       const category = globalCategories.find(cat => cat.id === categoryId);
       if (!category) return;
       
               // Create modal HTML
        const modalHTML = `
          <div class="modal fade" id="categoryDetailsModal" tabindex="-1" aria-labelledby="categoryDetailsModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content border-0 shadow-lg">
                <div class="modal-header bg-gradient-primary text-white border-0">
                  <h6 class="modal-title mb-0" id="categoryDetailsModalLabel">
                    <i class="bi bi-folder me-2"></i>
                    ${category.name}
                  </h6>
                  <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                  <div class="row g-3">
                    ${getSectionCards(category)}
                  </div>
                </div>
                <div class="modal-footer border-0 pt-0">
                  <button type="button" class="btn btn-light btn-sm" data-bs-dismiss="modal">
                    <i class="bi bi-x me-1"></i>
                    Close
                  </button>
                  <a href="/edit-category?id=${category.id}" class="btn btn-primary btn-sm">
                    <i class="bi bi-pencil me-1"></i>
                    Edit Category
                  </a>
                </div>
              </div>
            </div>
          </div>
        `;
       
       // Remove existing modal if any
       const existingModal = document.getElementById('categoryDetailsModal');
       if (existingModal) {
         existingModal.remove();
       }
       
       // Add modal to body
       document.body.insertAdjacentHTML('beforeend', modalHTML);
       
       // Show modal
       const modal = new bootstrap.Modal(document.getElementById('categoryDetailsModal'));
       modal.show();
       
               // Clean up modal when hidden
        document.getElementById('categoryDetailsModal').addEventListener('hidden.bs.modal', function() {
          this.remove();
        });
        
                 // Add click event listeners to section items
         document.querySelectorAll('.section-item').forEach(item => {
           item.addEventListener('click', function() {
             const href = this.getAttribute('data-href');
             if (href) {
               // Store the category ID in localStorage before navigation
               localStorage.setItem('activeCategory', category.id);
               window.location.href = href;
             }
           });
         });
     };
     
     // Generate section cards for the modal
     function getSectionCards(category) {
       const allSections = [
         { name: 'Hero Section', slug: 'hero-section', icon: 'bi-house', color: 'primary' },
         { name: 'Images Gallery', slug: 'images-gallery', icon: 'bi-images', color: 'success' },
         { name: 'Why Use Tool', slug: 'why-use-tool', icon: 'bi-question-circle', color: 'info' },
         { name: 'Text to Anything', slug: 'text-to-anything', icon: 'bi-type', color: 'warning' },
         { name: 'Blogs', slug: 'blogs', icon: 'bi-journal-text', color: 'secondary' },
         { name: 'Category Video', slug: 'category-video', icon: 'bi-camera-video', color: 'danger' },
         { name: 'Transform Grid', slug: 'transform-grid', icon: 'bi-grid-3x3', color: 'dark' }
       ];
       
       return allSections.map(section => {
         const existingSection = category.sections.find(s => 
           s.name.includes(section.name) || 
           s.href.includes(section.slug) ||
           (section.name === 'Hero Section' && s.name.includes('Hero')) ||
           (section.name === 'Images Gallery' && s.name.includes('Images')) ||
           (section.name === 'Why Use Tool' && (s.name.includes('Why use') || s.name.includes('Why-use'))) ||
           (section.name === 'Text to Anything' && s.name.includes('Text to')) ||
           (section.name === 'Blogs' && s.name.includes('Blog')) ||
           (section.name === 'Category Video' && s.name.includes('Video')) ||
           (section.name === 'Transform Grid' && s.name.includes('Transform'))
         );
         
         const hasContent = !!existingSection;
         const contentId = existingSection ? existingSection.contentId : null;
         const href = hasContent ? 
           `/${section.slug}?id=${contentId}&category=${category.name.toLowerCase().replace(/\s+/g, '-')}` :
           `/${section.slug}?categoryId=${category.id}`;
         
                   return `
            <div class="col-6">
              <div class="section-item ${hasContent ? 'has-content' : 'no-content'}" data-href="${href}">
                <div class="section-info">
                  <h6 class="section-title">${section.name}</h6>
                  <span class="section-status">${hasContent ? 'Available' : 'Empty'}</span>
                </div>
                <div class="section-action">
                  <i class="bi ${hasContent ? 'bi-arrow-right' : 'bi-plus'}"></i>
                </div>
              </div>
            </div>
          `;
       }).join('');
     }

    // Initialize the page
    renderCategories();
  });
</script>
